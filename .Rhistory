prob5.5 = matrix(c(4,1,2,3,3,4,16,5,10,15,13,22),nrow=2,byrow = TRUE)
prob5.5
prob5.5[1,]
prob5.5[1,]%*%t(prob5.5[1,])
a = prob5.5[1,]%*%t(prob5.5[1,])
inv(a)
(a)^-1
16^-1
install.packages("matlib")
library(matlib)
inverse(a)
inv(a)
a = t(prob5.5[1,])%*%(prob5.5[1,])
(a)^-1
inv(a)
a
X = matrix(c(rep(1,6),prob5.5[1,]))
x
x = matrix(c(rep(1,6),prob5.5[1,]))
x
x = matrix(c(rep(1,6),prob5.5[1,]),nrow=2,byrow=TRUE)
x
t(x)%*%x
(x)%*%t(x)
inv(x)
inv(x)
both = (x)%*%t(x)
inv(both)
document()
getwd()
library(devtools)
library(roxygen2)
document()
document()
document()
document()
document()
covValues = genCovValues(p = c(0.5,0.5),N=100)
treat = psd(covValues)
treat = psd(covValues,n.trt=1)
table(treat)
data  = simulatedata.car(mean.x = c(0,0),mean.y = c(0,0),sigma0 = 1,sigma = 1,rho = 0.5,tau1 = 1,tau2=1,beta0 = .5,beta1 = .5,treat = treat,covValues = covValues)
data  = simulatedata.car(mean.x = c(0,0),mean.y = c(0,0),sigma0 = 1,sigma = 1,rho = 0.5,tau1 = 1,tau2=1,beta0 = .5,beta1 = .5,treat = treat,covValues = covValues)
trts = unique(treat)
trts = trts[order(trts)]
# if (is.null(data)) keeps = rep(TRUE, nrow(covValues)) else keeps = data$treat %in% trts
# if (is.null(data)) covValues = covValues else covValues = covValues[(length(data$treat)+1):nrow(covValues),]
n.trt = length(unique(treat))-1
if (is.null(data)) n.x = table(treat) else n.x = table(treat)- table(data[data$treat %in% trts,]$treat)
n.x = table(treat)
n.y = ceiling(n.x/2)
n.y
diff = n.x-n.y
mean.full.x = rep(rep(0,n.trt+1),n.x)
mean.full.y = rep(rep(0,n.trt+1),n.y)
treat = tail(treat,sum(n.s))
treat = tail(treat,sum(n.x))
for (trt in trts)
{
mean.full.y[treat==trt][1:n.x[which(trts==trt)]] = c(rep(mean.y[which(trts==trt)], n.y[which(trts==trt)]),rep(NA,diff[which(trts==trt)]))
mean.full.x[treat==trt] = rep(mean.x[which(trts==trt)], n.x[which(trts==trt)])
}
mean.x = c(0,0)
mean.y = c(0,0)
sigma0 = 1
sigma = 1
rho = 0.5
tau1 = 1
tau2=1
beta0 = .5
beta1 = .5
for (trt in trts)
{
mean.full.y[treat==trt][1:n.x[which(trts==trt)]] = c(rep(mean.y[which(trts==trt)], n.y[which(trts==trt)]),rep(NA,diff[which(trts==trt)]))
mean.full.x[treat==trt] = rep(mean.x[which(trts==trt)], n.x[which(trts==trt)])
}
mean.full = cbind(mean.full.x,mean.full.y)
mean.full
# simulate error about mean zero then add on treatment effects
mean = c(0,0)
var = c(sigma0^2,rho*sigma0*sigma,rho*sigma0*sigma,sigma^2)
dim(var) = c(2,2)
full.error = mvtnorm::rmvnorm(nrow(mean.full),mean,var)
# covmatrix = matrix(c(tau1*covValues[,1],tau2*covValues[,2]),ncol=2)
full.data  = full.error + mean.full
full.data
new.data = data.frame(x=full.data[,1],y=full.data[,2],treat=treat)
document()
data  = simulatedata.car(mean.x = c(0,0),mean.y = c(0,0),sigma0 = 1,sigma = 1,rho = 0.5,tau1 = 1,tau2=1,beta0 = .5,beta1 = .5,treat = treat,covValues = covValues)
data$yhat = data$x*beta1 + beta0
y.hat.bar = rowMeans(data$yhat)
means = rowMeans(data)
means
data
means = colMeans(data)
means
means$x
means['x']
y.hat.bar = means['yhat']
s.1 = apply(y.hat,1,var)
s.1 = apply(data$yhat,1,var)
var(data$yhat)
s.1 = var(data$yhat)
y.bar = means['y']
s.2 = var(data$y)
s.1.sq = var(data$yhat)
y.bar = means['y']
s.2.sq = var(data$y)
omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq)))
length(data$y)
length(data$x)
length(na.omit(data$y))
length(na.omit(data$x))
length(na.omit(data$y))
s.2.sq = var(na.omit(data$y))
s.2.sq = var(data$y)
omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq)))
m = length(na.omit(data$y))
n = length(data$x)
n = length(data$x)
means = colMeans(data)
y.hat.bar = means['yhat']
s.1.sq = var(data$yhat)
y.bar = means['y']
s.2.sq = var(na.omit(data$y))
omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq)))
mu.gd = omega.hat*y.hat.bar + (1-omega.hat)*y.bar
y.bar
means
means = colMeans(na.omit(data))
means
y.bar = mean(na.omit(data$y))
y.hat.bar = mean((data$yhat))
s.1.sq = var(data$yhat)
y.bar = mean(na.omit(data$y))
s.2.sq = var(na.omit(data$y))
omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq)))
mu.gd = omega.hat*y.hat.bar + (1-omega.hat)*y.bar
var.mu.gd = (1/((n/s.1.sq)+(m/s.2.sq)))*(1+4*omega.hat*(1-omega.hat)*((1/(n-1))+(1/(m-1))))
if ( n.trt == 1) {
T.stat = (mu.gd - mu.null)/sqrt(var.mu.gd)
ci.upper = mu.gd+qnorm(z.alpha/2)*sqrt(var.mu.gd)
ci.lower = mu.gd-qnorm(z.alpha/2)*sqrt(var.mu.gd)
}
mu.null = 0
n.trt
if ( n.trt == 1) {
T.stat = (mu.gd - mu.null)/sqrt(var.mu.gd)
ci.upper = mu.gd+qnorm(z.alpha/2)*sqrt(var.mu.gd)
ci.lower = mu.gd-qnorm(z.alpha/2)*sqrt(var.mu.gd)
}
# n = 100
# m = 50
#
# mu.null = 0
# beta.0 = .5
# beta.1 = .5
z.alpha = 0.05
z.beta = .2
if ( n.trt == 1) {
T.stat = (mu.gd - mu.null)/sqrt(var.mu.gd)
ci.upper = mu.gd+qnorm(z.alpha/2)*sqrt(var.mu.gd)
ci.lower = mu.gd-qnorm(z.alpha/2)*sqrt(var.mu.gd)
}
n.trt
data
table(data$treat)
covValues = genCovValues(p = c(0.5,0.5),N=100)
treat = psd(covValues,n.trt=2)
table(treat)
data  = simulatedata.car(mean.x = c(0,0),mean.y = c(0,0),sigma0 = 1,sigma = 1,rho = 0.5,tau1 = 1,tau2=1,beta0 = .5,beta1 = .5,treat = treat,covValues = covValues)
covValues = genCovValues(p = c(0.5,0.5),N=300)
treat = psd(covValues,n.trt=2)
table(treat)
data  = simulatedata.car(mean.x = c(0,0),mean.y = c(0,0),sigma0 = 1,sigma = 1,rho = 0.5,tau1 = 1,tau2=1,beta0 = .5,beta1 = .5,treat = treat,covValues = covValues)
covValues = genCovValues(p = c(0.5,0.5),N=300)
treat = psd(covValues,n.trt=2)
table(treat)
n.trt = 2
data  = simulatedata.car(mean.x = rep(0,(n.trt+1)),mean.y = rep(0,(n.trt+1)),sigma0 = 1,sigma = 1,rho = 0.5,tau1 = 1,tau2=1,beta0 = .5,beta1 = .5,treat = treat,covValues = covValues)
data
mu.gd.vec = rep(0,n.trt)
var.mu.gd.vec = rep(0,n.trt)
z.alpha = 0.05
z.beta = .2
for (i in 1:n.trt) {
n = length(data[data$treat==i]$x)
m = length(na.omit(data[data$treat==i]$y))
data$yhat = data$x*beta1 + beta0
y.hat.bar = mean((data[data$treat==i]$yhat))
s.1.sq = var(data[data$treat==i]$yhat)
y.bar = mean(na.omit(data[data$treat==i]$y))
s.2.sq = var(na.omit(data[data$treat==i]$y))
# mu.hat = omega*y.hat.bar + (1-omega)*y.bar
# omega = (n/(beta.1^2*tau^2))/((n/(beta.1^2*tau^2)) + m/sigma^2)
omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq)))
mu.gd = omega.hat*y.hat.bar + (1-omega.hat)*y.bar
var.mu.gd = (1/((n/s.1.sq)+(m/s.2.sq)))*(1+4*omega.hat*(1-omega.hat)*((1/(n-1))+(1/(m-1))))
mu.gd.vec[i] = mu.gd
var.mu.gd.vec[i] = var.mu.gd
}
for (i in 1:n.trt) {
n = length(data[data$treat==i,]$x)
m = length(na.omit(data[data$treat==i,]$y))
data$yhat = data$x*beta1 + beta0
y.hat.bar = mean((data[data$treat==i,]$yhat))
s.1.sq = var(data[data$treat==i,]$yhat)
y.bar = mean(na.omit(data[data$treat==i,]$y))
s.2.sq = var(na.omit(data[data$treat==i,]$y))
# mu.hat = omega*y.hat.bar + (1-omega)*y.bar
# omega = (n/(beta.1^2*tau^2))/((n/(beta.1^2*tau^2)) + m/sigma^2)
omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq)))
mu.gd = omega.hat*y.hat.bar + (1-omega.hat)*y.bar
var.mu.gd = (1/((n/s.1.sq)+(m/s.2.sq)))*(1+4*omega.hat*(1-omega.hat)*((1/(n-1))+(1/(m-1))))
mu.gd.vec[i] = mu.gd
var.mu.gd.vec[i] = var.mu.gd
}
mu.gd.vec
document()
get.t.two(mu.gd.vec,var.mu.gd.vec, 0.05)
if (n.trt == 1) t.ci = get.t.one(mu.gd.vec, var.mu.gd.vec, z.alpha) else t.ci = get.t.two(mu.gd.vec, var.mu.gd.vec)
if (n.trt == 1) t.ci = get.t.one(mu.gd.vec, var.mu.gd.vec, z.alpha, mu.null) else t.ci = get.t.two(mu.gd.vec, var.mu.gd.vec, z.alpha)
document()
if (n.trt == 1) t.ci = get.t.one(mu.gd.vec, var.mu.gd.vec, z.alpha, mu.null) else t.ci = get.t.two(mu.gd.vec, var.mu.gd.vec, z.alpha)
T.stat = t.ci[1]
ci = t.ci[2:3]
product(ci)
prod(ci)
3^2*2^3
if (is.null(tau)) omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq))) else omega.hat = (n/((beta0^2)*(tau^2)))/((n/((beta0^2)*(tau^2)))+(m/(sigma^2)))
tau = NULL
if (is.null(tau)) omega.hat = (n/(s.1.sq))/((n/s.1.sq)+(m/(s.2.sq))) else omega.hat = (n/((beta0^2)*(tau^2)))/((n/((beta0^2)*(tau^2)))+(m/(sigma^2)))
